/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables.records


import edu.uoc.hagendazs.generated.jooq.tables.LabelEvent

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class LabelEventRecord() : TableRecordImpl<LabelEventRecord>(LabelEvent.LABEL_EVENT), Record2<String?, String?> {

    var eventId: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var categoryId: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>
    override fun valuesRow(): Row2<String?, String?> = super.valuesRow() as Row2<String?, String?>
    override fun field1(): Field<String?> = LabelEvent.LABEL_EVENT.EVENT_ID
    override fun field2(): Field<String?> = LabelEvent.LABEL_EVENT.CATEGORY_ID
    override fun component1(): String? = eventId
    override fun component2(): String? = categoryId
    override fun value1(): String? = eventId
    override fun value2(): String? = categoryId

    override fun value1(value: String?): LabelEventRecord {
        this.eventId = value
        return this
    }

    override fun value2(value: String?): LabelEventRecord {
        this.categoryId = value
        return this
    }

    override fun values(value1: String?, value2: String?): LabelEventRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised LabelEventRecord
     */
    constructor(eventId: String? = null, categoryId: String? = null): this() {
        this.eventId = eventId
        this.categoryId = categoryId
    }
}
