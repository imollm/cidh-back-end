/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables


import edu.uoc.hagendazs.generated.jooq.Public
import edu.uoc.hagendazs.generated.jooq.keys.LABEL_PKEY
import edu.uoc.hagendazs.generated.jooq.tables.records.LabelRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Label(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LabelRecord>?,
    aliased: Table<LabelRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<LabelRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.label</code>
         */
        val LABEL = Label()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LabelRecord> = LabelRecord::class.java

    /**
     * The column <code>public.label.name</code>.
     */
    val NAME: TableField<LabelRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.label.description</code>.
     */
    val DESCRIPTION: TableField<LabelRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<LabelRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<LabelRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.label</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.label</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.label</code> table reference
     */
    constructor(): this(DSL.name("label"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, LabelRecord>): this(Internal.createPathAlias(child, key), child, key, LABEL, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<LabelRecord> = LABEL_PKEY
    override fun getKeys(): List<UniqueKey<LabelRecord>> = listOf(LABEL_PKEY)
    override fun `as`(alias: String): Label = Label(DSL.name(alias), this)
    override fun `as`(alias: Name): Label = Label(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Label = Label(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Label = Label(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>
}
