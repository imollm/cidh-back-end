/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables


import edu.uoc.hagendazs.generated.jooq.Public
import edu.uoc.hagendazs.generated.jooq.keys.PK_USER_EVENT_RATING
import edu.uoc.hagendazs.generated.jooq.keys.USER_EVENT_RATING__FK_USER_EVENT_RATING_EVENT_ID
import edu.uoc.hagendazs.generated.jooq.keys.USER_EVENT_RATING__FK_USER_EVENT_RATING_USER_ID
import edu.uoc.hagendazs.generated.jooq.tables.records.UserEventRatingRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserEventRating(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserEventRatingRecord>?,
    aliased: Table<UserEventRatingRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserEventRatingRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user_event_rating</code>
         */
        val USER_EVENT_RATING = UserEventRating()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserEventRatingRecord> = UserEventRatingRecord::class.java

    /**
     * The column <code>public.user_event_rating.user_id</code>.
     */
    val USER_ID: TableField<UserEventRatingRecord, String?> = createField(DSL.name("user_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_event_rating.event_id</code>.
     */
    val EVENT_ID: TableField<UserEventRatingRecord, String?> = createField(DSL.name("event_id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_event_rating.created_at</code>.
     */
    val CREATED_AT: TableField<UserEventRatingRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.user_event_rating.rating</code>.
     */
    val RATING: TableField<UserEventRatingRecord, Int?> = createField(DSL.name("rating"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserEventRatingRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserEventRatingRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_event_rating</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_event_rating</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_event_rating</code> table reference
     */
    constructor(): this(DSL.name("user_event_rating"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserEventRatingRecord>): this(Internal.createPathAlias(child, key), child, key, USER_EVENT_RATING, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<UserEventRatingRecord> = PK_USER_EVENT_RATING
    override fun getKeys(): List<UniqueKey<UserEventRatingRecord>> = listOf(PK_USER_EVENT_RATING)
    override fun getReferences(): List<ForeignKey<UserEventRatingRecord, *>> = listOf(USER_EVENT_RATING__FK_USER_EVENT_RATING_USER_ID, USER_EVENT_RATING__FK_USER_EVENT_RATING_EVENT_ID)

    private lateinit var _user: User
    private lateinit var _event: Event
    fun user(): User {
        if (!this::_user.isInitialized)
            _user = User(this, USER_EVENT_RATING__FK_USER_EVENT_RATING_USER_ID)

        return _user;
    }
    fun event(): Event {
        if (!this::_event.isInitialized)
            _event = Event(this, USER_EVENT_RATING__FK_USER_EVENT_RATING_EVENT_ID)

        return _event;
    }
    override fun `as`(alias: String): UserEventRating = UserEventRating(DSL.name(alias), this)
    override fun `as`(alias: Name): UserEventRating = UserEventRating(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserEventRating = UserEventRating(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserEventRating = UserEventRating(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<String?, String?, LocalDateTime?, Int?> = super.fieldsRow() as Row4<String?, String?, LocalDateTime?, Int?>
}
