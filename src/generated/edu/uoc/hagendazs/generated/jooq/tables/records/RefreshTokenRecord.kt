/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables.records


import edu.uoc.hagendazs.generated.jooq.tables.RefreshToken

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RefreshTokenRecord() : UpdatableRecordImpl<RefreshTokenRecord>(RefreshToken.REFRESH_TOKEN), Record3<String?, String?, LocalDateTime?> {

    var id: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var userId: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var expiryDate: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<String?, String?, LocalDateTime?> = super.fieldsRow() as Row3<String?, String?, LocalDateTime?>
    override fun valuesRow(): Row3<String?, String?, LocalDateTime?> = super.valuesRow() as Row3<String?, String?, LocalDateTime?>
    override fun field1(): Field<String?> = RefreshToken.REFRESH_TOKEN.ID
    override fun field2(): Field<String?> = RefreshToken.REFRESH_TOKEN.USER_ID
    override fun field3(): Field<LocalDateTime?> = RefreshToken.REFRESH_TOKEN.EXPIRY_DATE
    override fun component1(): String? = id
    override fun component2(): String? = userId
    override fun component3(): LocalDateTime? = expiryDate
    override fun value1(): String? = id
    override fun value2(): String? = userId
    override fun value3(): LocalDateTime? = expiryDate

    override fun value1(value: String?): RefreshTokenRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): RefreshTokenRecord {
        this.userId = value
        return this
    }

    override fun value3(value: LocalDateTime?): RefreshTokenRecord {
        this.expiryDate = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: LocalDateTime?): RefreshTokenRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised RefreshTokenRecord
     */
    constructor(id: String? = null, userId: String? = null, expiryDate: LocalDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.expiryDate = expiryDate
    }
}
