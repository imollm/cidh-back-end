/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables


import edu.uoc.hagendazs.generated.jooq.Public
import edu.uoc.hagendazs.generated.jooq.keys.EVENT_ORGANIZER_NAME_KEY
import edu.uoc.hagendazs.generated.jooq.keys.EVENT_ORGANIZER_PKEY
import edu.uoc.hagendazs.generated.jooq.keys.EVENT_ORGANIZER__FK_ADMIN
import edu.uoc.hagendazs.generated.jooq.tables.records.EventOrganizerRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventOrganizer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EventOrganizerRecord>?,
    aliased: Table<EventOrganizerRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EventOrganizerRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.event_organizer</code>
         */
        val EVENT_ORGANIZER = EventOrganizer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventOrganizerRecord> = EventOrganizerRecord::class.java

    /**
     * The column <code>public.event_organizer.id</code>.
     */
    val ID: TableField<EventOrganizerRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.event_organizer.name</code>.
     */
    val NAME: TableField<EventOrganizerRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event_organizer.description</code>.
     */
    val DESCRIPTION: TableField<EventOrganizerRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event_organizer.admin</code>.
     */
    val ADMIN: TableField<EventOrganizerRecord, String?> = createField(DSL.name("admin"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.event_organizer.created_at</code>.
     */
    val CREATED_AT: TableField<EventOrganizerRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EventOrganizerRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EventOrganizerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.event_organizer</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.event_organizer</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.event_organizer</code> table reference
     */
    constructor(): this(DSL.name("event_organizer"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EventOrganizerRecord>): this(Internal.createPathAlias(child, key), child, key, EVENT_ORGANIZER, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<EventOrganizerRecord> = EVENT_ORGANIZER_PKEY
    override fun getKeys(): List<UniqueKey<EventOrganizerRecord>> = listOf(EVENT_ORGANIZER_PKEY, EVENT_ORGANIZER_NAME_KEY)
    override fun getReferences(): List<ForeignKey<EventOrganizerRecord, *>> = listOf(EVENT_ORGANIZER__FK_ADMIN)

    private lateinit var _user: User
    fun user(): User {
        if (!this::_user.isInitialized)
            _user = User(this, EVENT_ORGANIZER__FK_ADMIN)

        return _user;
    }
    override fun `as`(alias: String): EventOrganizer = EventOrganizer(DSL.name(alias), this)
    override fun `as`(alias: Name): EventOrganizer = EventOrganizer(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EventOrganizer = EventOrganizer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EventOrganizer = EventOrganizer(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<String?, String?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row5<String?, String?, String?, String?, LocalDateTime?>
}
