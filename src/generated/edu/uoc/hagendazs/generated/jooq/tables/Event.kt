/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables


import edu.uoc.hagendazs.generated.jooq.Public
import edu.uoc.hagendazs.generated.jooq.keys.EVENT_NAME_KEY
import edu.uoc.hagendazs.generated.jooq.keys.EVENT_PKEY
import edu.uoc.hagendazs.generated.jooq.keys.EVENT__FK_EVENT_CATEGORY
import edu.uoc.hagendazs.generated.jooq.keys.EVENT__FK_EVENT_ORGANIZER_EVENT
import edu.uoc.hagendazs.generated.jooq.tables.records.EventRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Event(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EventRecord>?,
    aliased: Table<EventRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EventRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.event</code>
         */
        val EVENT = Event()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventRecord> = EventRecord::class.java

    /**
     * The column <code>public.event.id</code>.
     */
    val ID: TableField<EventRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.event.name</code>.
     */
    val NAME: TableField<EventRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.event.description</code>.
     */
    val DESCRIPTION: TableField<EventRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.event.header_image</code>.
     */
    val HEADER_IMAGE: TableField<EventRecord, String?> = createField(DSL.name("header_image"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.start_date</code>.
     */
    val START_DATE: TableField<EventRecord, LocalDateTime?> = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.event.end_date</code>.
     */
    val END_DATE: TableField<EventRecord, LocalDateTime?> = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.event.organizer</code>.
     */
    val ORGANIZER: TableField<EventRecord, String?> = createField(DSL.name("organizer"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.event.category</code>.
     */
    val CATEGORY: TableField<EventRecord, String?> = createField(DSL.name("category"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<EventRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EventRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.event</code> table reference
     */
    constructor(): this(DSL.name("event"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EventRecord>): this(Internal.createPathAlias(child, key), child, key, EVENT, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<EventRecord> = EVENT_PKEY
    override fun getKeys(): List<UniqueKey<EventRecord>> = listOf(EVENT_PKEY, EVENT_NAME_KEY)
    override fun getReferences(): List<ForeignKey<EventRecord, *>> = listOf(EVENT__FK_EVENT_ORGANIZER_EVENT, EVENT__FK_EVENT_CATEGORY)

    private lateinit var _eventOrganizer: EventOrganizer
    private lateinit var _category: Category
    fun eventOrganizer(): EventOrganizer {
        if (!this::_eventOrganizer.isInitialized)
            _eventOrganizer = EventOrganizer(this, EVENT__FK_EVENT_ORGANIZER_EVENT)

        return _eventOrganizer;
    }
    fun category(): Category {
        if (!this::_category.isInitialized)
            _category = Category(this, EVENT__FK_EVENT_CATEGORY)

        return _category;
    }
    override fun `as`(alias: String): Event = Event(DSL.name(alias), this)
    override fun `as`(alias: Name): Event = Event(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Event = Event(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Event = Event(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?, String?> = super.fieldsRow() as Row8<String?, String?, String?, String?, LocalDateTime?, LocalDateTime?, String?, String?>
}
