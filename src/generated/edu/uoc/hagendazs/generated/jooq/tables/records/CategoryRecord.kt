/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables.records


import edu.uoc.hagendazs.generated.jooq.tables.Category

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CategoryRecord() : UpdatableRecordImpl<CategoryRecord>(Category.CATEGORY), Record4<String?, String?, String?, LocalDateTime?> {

    var id: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var name: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var description: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var createdAt: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row4<String?, String?, String?, LocalDateTime?>
    override fun valuesRow(): Row4<String?, String?, String?, LocalDateTime?> = super.valuesRow() as Row4<String?, String?, String?, LocalDateTime?>
    override fun field1(): Field<String?> = Category.CATEGORY.ID
    override fun field2(): Field<String?> = Category.CATEGORY.NAME
    override fun field3(): Field<String?> = Category.CATEGORY.DESCRIPTION
    override fun field4(): Field<LocalDateTime?> = Category.CATEGORY.CREATED_AT
    override fun component1(): String? = id
    override fun component2(): String? = name
    override fun component3(): String? = description
    override fun component4(): LocalDateTime? = createdAt
    override fun value1(): String? = id
    override fun value2(): String? = name
    override fun value3(): String? = description
    override fun value4(): LocalDateTime? = createdAt

    override fun value1(value: String?): CategoryRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): CategoryRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): CategoryRecord {
        this.description = value
        return this
    }

    override fun value4(value: LocalDateTime?): CategoryRecord {
        this.createdAt = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: String?, value4: LocalDateTime?): CategoryRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised CategoryRecord
     */
    constructor(id: String? = null, name: String? = null, description: String? = null, createdAt: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        this.createdAt = createdAt
    }
}
