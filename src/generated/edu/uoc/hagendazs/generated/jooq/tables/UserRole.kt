/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables


import edu.uoc.hagendazs.generated.jooq.Public
import edu.uoc.hagendazs.generated.jooq.keys.UNIQUE_PAIRS
import edu.uoc.hagendazs.generated.jooq.keys.USER_ROLE_PKEY
import edu.uoc.hagendazs.generated.jooq.keys.USER_ROLE__ROLE_PERSON
import edu.uoc.hagendazs.generated.jooq.keys.USER_ROLE__ROLE_PERSON_ROLE
import edu.uoc.hagendazs.generated.jooq.tables.records.UserRoleRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRole(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRoleRecord>?,
    aliased: Table<UserRoleRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserRoleRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user_role</code>
         */
        val USER_ROLE = UserRole()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRoleRecord> = UserRoleRecord::class.java

    /**
     * The column <code>public.user_role.id</code>.
     */
    val ID: TableField<UserRoleRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_role.person</code>.
     */
    val PERSON: TableField<UserRoleRecord, String?> = createField(DSL.name("person"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user_role.role</code>.
     */
    val ROLE: TableField<UserRoleRecord, String?> = createField(DSL.name("role"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserRoleRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRoleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_role</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_role</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_role</code> table reference
     */
    constructor(): this(DSL.name("user_role"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserRoleRecord>): this(Internal.createPathAlias(child, key), child, key, USER_ROLE, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<UserRoleRecord> = USER_ROLE_PKEY
    override fun getKeys(): List<UniqueKey<UserRoleRecord>> = listOf(USER_ROLE_PKEY, UNIQUE_PAIRS)
    override fun getReferences(): List<ForeignKey<UserRoleRecord, *>> = listOf(USER_ROLE__ROLE_PERSON, USER_ROLE__ROLE_PERSON_ROLE)

    private lateinit var _user: User
    private lateinit var _role: Role
    fun user(): User {
        if (!this::_user.isInitialized)
            _user = User(this, USER_ROLE__ROLE_PERSON)

        return _user;
    }
    fun role(): Role {
        if (!this::_role.isInitialized)
            _role = Role(this, USER_ROLE__ROLE_PERSON_ROLE)

        return _role;
    }
    override fun `as`(alias: String): UserRole = UserRole(DSL.name(alias), this)
    override fun `as`(alias: Name): UserRole = UserRole(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserRole = UserRole(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserRole = UserRole(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, String?> = super.fieldsRow() as Row3<String?, String?, String?>
}
