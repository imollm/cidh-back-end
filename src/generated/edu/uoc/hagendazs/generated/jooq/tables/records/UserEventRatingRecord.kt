/*
 * This file is generated by jOOQ.
 */
package edu.uoc.hagendazs.generated.jooq.tables.records


import edu.uoc.hagendazs.generated.jooq.tables.UserEventRating

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserEventRatingRecord() : UpdatableRecordImpl<UserEventRatingRecord>(UserEventRating.USER_EVENT_RATING), Record4<String?, String?, LocalDateTime?, Int?> {

    var userId: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var eventId: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var createdAt: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    var rating: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, String?> = super.key() as Record2<String?, String?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<String?, String?, LocalDateTime?, Int?> = super.fieldsRow() as Row4<String?, String?, LocalDateTime?, Int?>
    override fun valuesRow(): Row4<String?, String?, LocalDateTime?, Int?> = super.valuesRow() as Row4<String?, String?, LocalDateTime?, Int?>
    override fun field1(): Field<String?> = UserEventRating.USER_EVENT_RATING.USER_ID
    override fun field2(): Field<String?> = UserEventRating.USER_EVENT_RATING.EVENT_ID
    override fun field3(): Field<LocalDateTime?> = UserEventRating.USER_EVENT_RATING.CREATED_AT
    override fun field4(): Field<Int?> = UserEventRating.USER_EVENT_RATING.RATING
    override fun component1(): String? = userId
    override fun component2(): String? = eventId
    override fun component3(): LocalDateTime? = createdAt
    override fun component4(): Int? = rating
    override fun value1(): String? = userId
    override fun value2(): String? = eventId
    override fun value3(): LocalDateTime? = createdAt
    override fun value4(): Int? = rating

    override fun value1(value: String?): UserEventRatingRecord {
        this.userId = value
        return this
    }

    override fun value2(value: String?): UserEventRatingRecord {
        this.eventId = value
        return this
    }

    override fun value3(value: LocalDateTime?): UserEventRatingRecord {
        this.createdAt = value
        return this
    }

    override fun value4(value: Int?): UserEventRatingRecord {
        this.rating = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: LocalDateTime?, value4: Int?): UserEventRatingRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised UserEventRatingRecord
     */
    constructor(userId: String? = null, eventId: String? = null, createdAt: LocalDateTime? = null, rating: Int? = null): this() {
        this.userId = userId
        this.eventId = eventId
        this.createdAt = createdAt
        this.rating = rating
    }
}
